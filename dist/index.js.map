{"mappings":"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AAK;IAAI;IAAI;IAAI;IAAK;IAAK;IAAG;IAAK;IAAK;IAAI;IAAK;IAAI;IAAI;IAAK;IAAG;IAAI;IAAI;IAAK;IAAI;IACjI;IAAI;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IAAI;IAAG;IAAI;IAAK;IAAI;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAI;IAAI;IAAK;IAAI;IAAI;IAAK;IAAK;IAAI;IACvH;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAI;IAAK;IAAI;IAAK;IAAK;IAAI;IAAI;IAAK;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAI;IACpH;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAI;IAAI;IAAK;IAAI;IAAK;IAAK;IAAK;IAAI;IAAI;IAAI;IAAI;IAAK;IAAG;IAAK;IAAI;IAAI;IAAK;IAAI;IAAK;IAAK;IACpH;IAAI;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAG;IAAI;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IACtH;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IAAK;IAAK;IAAI;IAAK;IAAI;IAAI;IAAI;IAAI;IAAK;IAAK;IAAI;IAAI;IAAK;IAAK;IAAK;IAAK;IACnH;IAAK;IAAK;IAAG;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAG;IAAK;IAAI;IAAI;IAAK;IAAI;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IACtH;IAAK;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IAAK;IACnH;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAK;IAAI;IAAK;IAAK;IAAK;IAAK;IAAI;IAAI;IAAK;IAAG;IAAK;IAAK;IAAK;IAAK;IACrH;IAAI;IAAK;IAAK;IAAI;IAAI;IAAI;IAAI;IA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","sources":["node_modules/randomcolor/randomColor.js","src/index.js","src/rnd.js","src/math.js","src/noise.js","node_modules/noisejs/index.js","node_modules/simplex-noise/dist/esm/simplex-noise.js","node_modules/simplex-noise/simplex-noise.ts","node_modules/three/examples/jsm/math/ImprovedNoise.js","src/arr.js"],"sourcesContent":["// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","import \"./rnd\"\nimport \"./noise\"\nimport \"./arr\"","import randomColor from \"randomcolor\";\nimport {lerp} from \"./math\";\n\nlet rndFn = Math.random;\nconst _cache = {};\nconst gaussPrev = {};\n\nconst setfn = (func) => {\n    rndFn = func;\n}\n\n// random number between a and b (b is not included)\nconst num = (a = 0.0, b = 1.0) => {\n    return lerp(a, b, rndFn());\n}\n\n// random integer between a and b (b is included)\n// requires a < b\nconst int = (a, b) => {\n    return Math.floor(num(a, b + 1));\n}\n\n// random boolean with p as percent likelihood of true\nconst bool = (p = 0.5) => {\n    return rndFn() < p;\n}\n\n// choose a random item in an array of items\nconst choice = (list) => {\n    return list[int(0, list.length - 1)];\n}\n\nconst exp = (a, b, n = 2) => {\n    return a + rndFn() ** n * (b - a);\n}\n\nconst gauss = (mean, sd = 1, y1 = false, prevKey = 'gauss') => {\n    let x1, x2, w;\n    if (y1 === false) {\n        if (gaussPrev[prevKey]) {\n            y1 = gaussPrev[prevKey];\n            delete gaussPrev[prevKey];\n        } else {\n            do {\n                x1 = num(0, 2) - 1;\n                x2 = num(0, 2) - 1;\n                w = x1 * x1 + x2 * x2;\n            } while (w >= 1);\n            w = Math.sqrt(-2 * Math.log(w) / w);\n            y1 = x1 * w;\n            gaussPrev[prevKey] = x2 * w;\n        }\n    }\n    const m = mean || 0;\n    return y1 * sd + m;\n}\n\nconst gaussMinMax = (a = 0, b = 1, y1 = false, prevKey = 'gaussMinMax') => {\n    return gauss(a + ((b-a) / 2), (b-a) / 2, y1, prevKey);\n}\n\nconst cache = (name, gen) => {\n    if (!_cache[name]) {\n        _cache[name] = (gen || rndFn)();\n    }\n    return _cache[name];\n}\n\nconst cacheNum = (name, a = 0.0, b = 1.0) => {\n    return lerp(a, b, cache(name));\n}\n\nconst cacheGauss = (name, mean, sd = 1, prevKey = 'cacheGauss') => {\n    return cache(name, () => {\n        return gauss(mean, sd, false, prevKey);\n    });\n}\n\nconst cacheGaussMinMax = (name, a = 0, b = 1, prevKey = 'cacheGaussMinMax') => {\n    return cache(name, () => {\n        return gaussMinMax(a, b, false, prevKey);\n    });\n}\n\nconst cacheBool = (name, p = 0.5) => {\n    return cache(name) < p;\n}\n\n\nconst color = (options) => {\n    return randomColor(Object.assign({\n        format: 'rgbArray'\n    }, options || {})).map((v) => {\n        const div = (v1) => v1/255;\n        return Array.isArray(v) ? v.map(div) : div(v);\n    });\n}\n\nwindow.rnd = { setfn, num, int, bool, choice, exp, gauss, gaussMinMax, cache, cacheNum, cacheGauss, cacheGaussMinMax, cacheBool, color };\n\nexport { setfn, num, int, bool, choice, exp, gauss, gaussMinMax, cache, cacheNum, cacheGauss, cacheGaussMinMax, cacheBool, color }","const lerp = (a, b, perc) => {\n    return a + (b - a) * perc;\n}\n\nconst map = (n, start1, stop1, start2, stop2, withinBounds) => {\n    const newval = (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n    if (!withinBounds) {\n        return newval;\n    }\n    if (start2 < stop2) {\n        return constrain(newval, start2, stop2);\n    } else {\n        return constrain(newval, stop2, start2);\n    }\n};\n\nconst constrain = (n, low = 0, high = 1.0) => {\n    return Math.max(Math.min(n, high), low);\n};\n\nexport { lerp, map, constrain }","import { Noise } from \"noisejs\";\nimport { createNoise2D, createNoise3D, createNoise4D } from 'simplex-noise';\nimport { ImprovedNoise } from 'three/examples/jsm/math/ImprovedNoise';\nimport { map } from \"./math\";\n\nconst options = {};\nlet perlin, simplex, pink, brown, yellow, improved, simplex2D, simplex3D, simplex4D, noisejs;\n\nconst init = (opts = {}) => {\n    Object.assign(options, {\n        seedFn: Math.random,\n        scale: 0.06,\n        octaves: 6,\n        lacunarity: 2.0,\n        // redistribution: 1,\n    }, opts);\n    initPerlin(options);\n    initSimplex(options);\n    initFBM(options);\n    initImproved(options);\n}\n\nconst initPerlin = ({seedFn, scale}) => {\n    noisejs = new Noise(seedFn());\n    perlin = {\n        get2: function(x, y, scale2 = 1) {\n            return noisejs.perlin2(x * scale * scale2, y * scale * scale2);\n        },\n        get3: function(x, y, z, scale2 = 1) {\n            return noisejs.perlin3(x * scale * scale2, y * scale * scale2, z * scale * scale2);\n        },\n    };\n}\n\nconst initSimplex = ({seedFn, scale}) => {\n    simplex2D = createNoise2D(seedFn);\n    simplex3D = createNoise3D(seedFn);\n    simplex4D = createNoise4D(seedFn);\n    simplex = {\n        get2: function(x, y, scale2 = 1) {\n            return simplex2D(x * scale * scale2, y * scale * scale2);\n        },\n        get3: function(x, y, z, scale2 = 1) {\n            return simplex3D(x * scale * scale2, y * scale * scale2, z * scale * scale2);\n        },\n        get4: function(x, y, z, w, scale2 = 1) {\n            return simplex4D(x * scale * scale2, y * scale * scale2, z * scale * scale2, w * scale * scale2);\n        },\n    };\n}\n\nconst initFBM = () => {\n    pink = {\n        get2: function(x, y, options) {\n            return fbm((f) => { return simplex.get2(x * f, y * f) }, 0, options);\n        },\n        get3: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get3(x * f, y * f, z * f) }, 0, options);\n        },\n        get4: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get4(x * f, y * f, z * f, w * f) }, 0, options);\n        },\n    };\n    brown = {\n        get2: function(x, y, z, w, options) {\n            return fbm((f) => { return simplex.get2(x * f, y * f) }, 0.5, options);\n        },\n        get3: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get3(x * f, y * f, z * f) }, 0.5, options);\n        },\n        get4: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get4(x * f, y * f, z * f, w * f) }, 0.5, options);\n        },\n    };\n    yellow = {\n        get2: function(x, y, options) {\n            return fbm((f) => { return simplex.get2(x * f, y * f) }, 1.0, options);\n        },\n        get3: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get3(x * f, y * f, z * f) }, 1.0, options);\n        },\n        get4: function(x, y, z, options) {\n            return fbm((f) => { return simplex.get4(x * f, y * f, z * f, w * f) }, 1.0, options);\n        },\n    };\n}\n\nconst initImproved = ({scale}) => {\n    const improvedNoise = new ImprovedNoise();\n    improved = {\n        get2: function(x, y, scale2 = 1) {\n            return improvedNoise.noise(x * scale * scale2, y * scale * scale2, 0);\n        },\n        get3: function(x, y, z, scale2 = 1) {\n            return improvedNoise.noise(x * scale * scale2, y * scale * scale2, z * scale * scale2);\n        },\n    };\n}\n\nfunction get2(type, x, y, min = 0, max = 1, scale = 1) {\n    const types = {perlin, simplex, pink, brown, yellow};\n    return map(types[type].get2(x, y, scale), -1, 1, min, max);\n}\n\nfunction get3(type, x, y, z, min = 0, max = 1, scale = 1) {\n    const types = {perlin, simplex, pink, brown, yellow};\n    return map(types[type].get3(x, y, z, scale), -1, 1, min, max);\n}\n\nfunction get4(type, x, y, z, w, min = 0, max = 1, scale = 1) {\n    const types = {simplex, pink, brown, yellow};\n    return map(types[type].get4(x, y, z, w, scale), -1, 1, min, max);\n}\n\nfunction fbm(noiseFn, H, opts) {\n    opts = Object.assign({}, options, opts || {});\n    const G = Math.pow(2, -H);\n    let frequency = 1.0;\n    let amplitude = 1.0;\n    // let max = amplitude;\n    let result = 0.0;\n    for (let i=0; i<opts.octaves; i++ ) {\n        result += amplitude * noiseFn(frequency);\n        frequency *= opts.lacunarity;\n        amplitude *= G;\n        // max += amplitude;\n    }\n    return result;\n    // const redistributed = Math.pow(result, opts.redistribution);\n    // return redistributed / max;\n}\n\nwindow.noise = {\n    perlin, simplex, pink, brown, yellow, improved,\n    init, initPerlin, initSimplex, initFBM, initImproved,\n    fbm, get2, get3, get4,\n};\n\nexport {\n    perlin, simplex, pink, brown, yellow, improved,\n    init, initPerlin, initSimplex, initFBM, initImproved,\n    fbm, get2, get3, get4,\n};","/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function(global){\n\n  // Passing in seed will seed this Noise instance\n  function Noise(seed) {\n    function Grad(x, y, z) {\n      this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function(x, y) {\n      return this.x*x + this.y*y;\n    };\n\n    Grad.prototype.dot3 = function(x, y, z) {\n      return this.x*x + this.y*y + this.z*z;\n    };\n\n    this.grad3 = [new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),\n                 new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),\n                 new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)];\n\n    this.p = [151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180];\n    // To remove the need for index wrapping, double the permutation table length\n    this.perm = new Array(512);\n    this.gradP = new Array(512);\n\n    this.seed(seed || 0);\n  }\n\n  // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n  Noise.prototype.seed = function(seed) {\n    if(seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if(seed < 256) {\n      seed |= seed << 8;\n    }\n\n    var p = this.p;\n    for(var i = 0; i < 256; i++) {\n      var v;\n      if (i & 1) {\n        v = p[i] ^ (seed & 255);\n      } else {\n        v = p[i] ^ ((seed>>8) & 255);\n      }\n\n      var perm = this.perm;\n      var gradP = this.gradP;\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = this.grad3[v % 12];\n    }\n  };\n\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n  var F2 = 0.5*(Math.sqrt(3)-1);\n  var G2 = (3-Math.sqrt(3))/6;\n\n  var F3 = 1/3;\n  var G3 = 1/6;\n\n  // 2D simplex noise\n  Noise.prototype.simplex2 = function(xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin)*F2; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var t = (i+j)*G2;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if(x0>y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1=1; j1=0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1=0; j1=1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+perm[j]];\n    var gi1 = gradP[i+i1+perm[j+j1]];\n    var gi2 = gradP[i+1+perm[j+1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0*x0-y0*y0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n  };\n\n  // 3D simplex noise\n  Noise.prototype.simplex3 = function(xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin+yin+zin)*F3; // Hairy factor for 2D\n    var i = Math.floor(xin+s);\n    var j = Math.floor(yin+s);\n    var k = Math.floor(zin+s);\n\n    var t = (i+j+k)*G3;\n    var x0 = xin-i+t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin-j+t;\n    var z0 = zin-k+t;\n\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if(x0 >= y0) {\n      if(y0 >= z0)      { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; }\n      else if(x0 >= z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; }\n      else              { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }\n    } else {\n      if(y0 < z0)      { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; }\n      else if(x0 < z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; }\n      else             { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; }\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3;\n\n    // Work out the hashed gradient indices of the four simplex corners\n    i &= 255;\n    j &= 255;\n    k &= 255;\n\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var gi0 = gradP[i+   perm[j+   perm[k   ]]];\n    var gi1 = gradP[i+i1+perm[j+j1+perm[k+k1]]];\n    var gi2 = gradP[i+i2+perm[j+j2+perm[k+k2]]];\n    var gi3 = gradP[i+ 1+perm[j+ 1+perm[k+ 1]]];\n\n    // Calculate the contribution from the four corners\n    var t0 = 0.5 - x0*x0-y0*y0-z0*z0;\n    if(t0<0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1*x1-y1*y1-z1*z1;\n    if(t1<0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n    var t2 = 0.5 - x2*x2-y2*y2-z2*z2;\n    if(t2<0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n    var t3 = 0.5 - x3*x3-y3*y3-z3*z3;\n    if(t3<0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 32 * (n0 + n1 + n2 + n3);\n\n  };\n\n  // ##### Perlin noise stuff\n\n  function fade(t) {\n    return t*t*t*(t*(t*6-15)+10);\n  }\n\n  function lerp(a, b, t) {\n    return (1-t)*a + t*b;\n  }\n\n  // 2D Perlin Noise\n  Noise.prototype.perlin2 = function(x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y);\n    // Get relative xy coordinates of point within that cell\n    x = x - X; y = y - Y;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255;\n\n    // Calculate noise contributions from each of the four corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n00 = gradP[X+perm[Y]].dot2(x, y);\n    var n01 = gradP[X+perm[Y+1]].dot2(x, y-1);\n    var n10 = gradP[X+1+perm[Y]].dot2(x-1, y);\n    var n11 = gradP[X+1+perm[Y+1]].dot2(x-1, y-1);\n\n    // Compute the fade curve value for x\n    var u = fade(x);\n\n    // Interpolate the four results\n    return lerp(\n        lerp(n00, n10, u),\n        lerp(n01, n11, u),\n       fade(y));\n  };\n\n  // 3D Perlin Noise\n  Noise.prototype.perlin3 = function(x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n    // Get relative xyz coordinates of point within that cell\n    x = x - X; y = y - Y; z = z - Z;\n    // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n    X = X & 255; Y = Y & 255; Z = Z & 255;\n\n    // Calculate noise contributions from each of the eight corners\n    var perm = this.perm;\n    var gradP = this.gradP;\n    var n000 = gradP[X+  perm[Y+  perm[Z  ]]].dot3(x,   y,     z);\n    var n001 = gradP[X+  perm[Y+  perm[Z+1]]].dot3(x,   y,   z-1);\n    var n010 = gradP[X+  perm[Y+1+perm[Z  ]]].dot3(x,   y-1,   z);\n    var n011 = gradP[X+  perm[Y+1+perm[Z+1]]].dot3(x,   y-1, z-1);\n    var n100 = gradP[X+1+perm[Y+  perm[Z  ]]].dot3(x-1,   y,   z);\n    var n101 = gradP[X+1+perm[Y+  perm[Z+1]]].dot3(x-1,   y, z-1);\n    var n110 = gradP[X+1+perm[Y+1+perm[Z  ]]].dot3(x-1, y-1,   z);\n    var n111 = gradP[X+1+perm[Y+1+perm[Z+1]]].dot3(x-1, y-1, z-1);\n\n    // Compute the fade curve value for x, y, z\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z);\n\n    // Interpolate\n    return lerp(\n        lerp(\n          lerp(n000, n100, u),\n          lerp(n001, n101, u), w),\n        lerp(\n          lerp(n010, n110, u),\n          lerp(n011, n111, u), w),\n       v);\n  };\n\n  global.Noise = Noise;\n\n})(typeof module === \"undefined\" ? this : module.exports);\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2022 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n// these #__PURE__ comments help uglifyjs with dead code removal\n// \nconst F2 = /*#__PURE__*/ 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = /*#__PURE__*/ (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = /*#__PURE__*/ (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = /*#__PURE__*/ (5.0 - Math.sqrt(5.0)) / 20.0;\n// I'm really not sure why this | 0 (basically a coercion to int)\n// is making this faster but I get ~5 million ops/sec more on the\n// benchmarks across the board or a ~10% speedup.\nconst fastFloor = (x) => Math.floor(x) | 0;\nconst grad2 = /*#__PURE__*/ new Float64Array([1, 1,\n    -1, 1,\n    1, -1,\n    -1, -1,\n    1, 0,\n    -1, 0,\n    1, 0,\n    -1, 0,\n    0, 1,\n    0, -1,\n    0, 1,\n    0, -1]);\n// double seems to be faster than single or int's\n// probably because most operations are in double precision\nconst grad3 = /*#__PURE__*/ new Float64Array([1, 1, 0,\n    -1, 1, 0,\n    1, -1, 0,\n    -1, -1, 0,\n    1, 0, 1,\n    -1, 0, 1,\n    1, 0, -1,\n    -1, 0, -1,\n    0, 1, 1,\n    0, -1, 1,\n    0, 1, -1,\n    0, -1, -1]);\n// double is a bit quicker here as well\nconst grad4 = /*#__PURE__*/ new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n    0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n    1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n    -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n    1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n    -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n    1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n    -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n/**\n * Creates a 2D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction2D}\n */\nexport function createNoise2D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating this yields a little ~3% performance improvement.\n    const permGrad2x = new Float64Array(perm).map(v => grad2[(v % 12) * 2]);\n    const permGrad2y = new Float64Array(perm).map(v => grad2[(v % 12) * 2 + 1]);\n    return function noise2D(x, y) {\n        // if(!isFinite(x) || !isFinite(y)) return 0;\n        let n0 = 0; // Noise contributions from the three corners\n        let n1 = 0;\n        let n2 = 0;\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y) * F2; // Hairy factor for 2D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const t = (i + j) * G2;\n        const X0 = i - t; // Unskew the cell origin back to (x,y) space\n        const Y0 = j - t;\n        const x0 = x - X0; // The x,y distances from the cell origin\n        const y0 = y - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        else {\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        const y1 = y0 - j1 + G2;\n        const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n        const y2 = y0 - 1.0 + 2.0 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            const gi0 = ii + perm[jj];\n            const g0x = permGrad2x[gi0];\n            const g0y = permGrad2y[gi0];\n            t0 *= t0;\n            // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n            n0 = t0 * t0 * (g0x * x0 + g0y * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            const gi1 = ii + i1 + perm[jj + j1];\n            const g1x = permGrad2x[gi1];\n            const g1y = permGrad2y[gi1];\n            t1 *= t1;\n            // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);\n            n1 = t1 * t1 * (g1x * x1 + g1y * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            const gi2 = ii + 1 + perm[jj + 1];\n            const g2x = permGrad2x[gi2];\n            const g2y = permGrad2y[gi2];\n            t2 *= t2;\n            // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);\n            n2 = t2 * t2 * (g2x * x2 + g2y * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70.0 * (n0 + n1 + n2);\n    };\n}\n/**\n * Creates a 3D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\nexport function createNoise3D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these seems to yield a speedup of over 15%\n    const permGrad3x = new Float64Array(perm).map(v => grad3[(v % 12) * 3]);\n    const permGrad3y = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 1]);\n    const permGrad3z = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 2]);\n    return function noise3D(x, y, z) {\n        let n0, n1, n2, n3; // Noise contributions from the four corners\n        // Skew the input space to determine which simplex cell we're in\n        const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const t = (i + j + k) * G3;\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const x0 = x - X0; // The x,y,z distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // X Y Z order\n            else if (x0 >= z0) {\n                i1 = 1;\n                j1 = 0;\n                k1 = 0;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // X Z Y order\n            else {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 1;\n                j2 = 0;\n                k2 = 1;\n            } // Z X Y order\n        }\n        else { // x0<y0\n            if (y0 < z0) {\n                i1 = 0;\n                j1 = 0;\n                k1 = 1;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Z Y X order\n            else if (x0 < z0) {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 0;\n                j2 = 1;\n                k2 = 1;\n            } // Y Z X order\n            else {\n                i1 = 0;\n                j1 = 1;\n                k1 = 0;\n                i2 = 1;\n                j2 = 1;\n                k2 = 0;\n            } // Y X Z order\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n        const y1 = y0 - j1 + G3;\n        const z1 = z0 - k1 + G3;\n        const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n        const y2 = y0 - j2 + 2.0 * G3;\n        const z2 = z0 - k2 + 2.0 * G3;\n        const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n        const y3 = y0 - 1.0 + 3.0 * G3;\n        const z3 = z0 - 1.0 + 3.0 * G3;\n        // Work out the hashed gradient indices of the four simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        // Calculate the contribution from the four corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to stay just inside [-1,1]\n        return 32.0 * (n0 + n1 + n2 + n3);\n    };\n}\n/**\n * Creates a 4D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction4D}\n */\nexport function createNoise4D(random = Math.random) {\n    const perm = buildPermutationTable(random);\n    // precalculating these leads to a ~10% speedup\n    const permGrad4x = new Float64Array(perm).map(v => grad4[(v % 32) * 4]);\n    const permGrad4y = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 1]);\n    const permGrad4z = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 2]);\n    const permGrad4w = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 3]);\n    return function noise4D(x, y, z, w) {\n        let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n        const s = (x + y + z + w) * F4; // Factor for 4D skewing\n        const i = fastFloor(x + s);\n        const j = fastFloor(y + s);\n        const k = fastFloor(z + s);\n        const l = fastFloor(w + s);\n        const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n        const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n        const Y0 = j - t;\n        const Z0 = k - t;\n        const W0 = l - t;\n        const x0 = x - X0; // The x,y,z,w distances from the cell origin\n        const y0 = y - Y0;\n        const z0 = z - Z0;\n        const w0 = w - W0;\n        // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n        // To find out which of the 24 possible simplices we're in, we need to\n        // determine the magnitude ordering of x0, y0, z0 and w0.\n        // Six pair-wise comparisons are performed between each possible pair\n        // of the four coordinates, and the results are used to rank the numbers.\n        let rankx = 0;\n        let ranky = 0;\n        let rankz = 0;\n        let rankw = 0;\n        if (x0 > y0)\n            rankx++;\n        else\n            ranky++;\n        if (x0 > z0)\n            rankx++;\n        else\n            rankz++;\n        if (x0 > w0)\n            rankx++;\n        else\n            rankw++;\n        if (y0 > z0)\n            ranky++;\n        else\n            rankz++;\n        if (y0 > w0)\n            ranky++;\n        else\n            rankw++;\n        if (z0 > w0)\n            rankz++;\n        else\n            rankw++;\n        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n        // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n        // impossible. Only the 24 indices which have non-zero entries make any sense.\n        // We use a thresholding to set the coordinates in turn from the largest magnitude.\n        // Rank 3 denotes the largest coordinate.\n        // Rank 2 denotes the second largest coordinate.\n        // Rank 1 denotes the second smallest coordinate.\n        // The integer offsets for the second simplex corner\n        const i1 = rankx >= 3 ? 1 : 0;\n        const j1 = ranky >= 3 ? 1 : 0;\n        const k1 = rankz >= 3 ? 1 : 0;\n        const l1 = rankw >= 3 ? 1 : 0;\n        // The integer offsets for the third simplex corner\n        const i2 = rankx >= 2 ? 1 : 0;\n        const j2 = ranky >= 2 ? 1 : 0;\n        const k2 = rankz >= 2 ? 1 : 0;\n        const l2 = rankw >= 2 ? 1 : 0;\n        // The integer offsets for the fourth simplex corner\n        const i3 = rankx >= 1 ? 1 : 0;\n        const j3 = ranky >= 1 ? 1 : 0;\n        const k3 = rankz >= 1 ? 1 : 0;\n        const l3 = rankw >= 1 ? 1 : 0;\n        // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n        const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n        const y1 = y0 - j1 + G4;\n        const z1 = z0 - k1 + G4;\n        const w1 = w0 - l1 + G4;\n        const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n        const y2 = y0 - j2 + 2.0 * G4;\n        const z2 = z0 - k2 + 2.0 * G4;\n        const w2 = w0 - l2 + 2.0 * G4;\n        const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n        const y3 = y0 - j3 + 3.0 * G4;\n        const z3 = z0 - k3 + 3.0 * G4;\n        const w3 = w0 - l3 + 3.0 * G4;\n        const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n        const y4 = y0 - 1.0 + 4.0 * G4;\n        const z4 = z0 - 1.0 + 4.0 * G4;\n        const w4 = w0 - 1.0 + 4.0 * G4;\n        // Work out the hashed gradient indices of the five simplex corners\n        const ii = i & 255;\n        const jj = j & 255;\n        const kk = k & 255;\n        const ll = l & 255;\n        // Calculate the contribution from the five corners\n        let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n        if (t0 < 0)\n            n0 = 0.0;\n        else {\n            const gi0 = ii + perm[jj + perm[kk + perm[ll]]];\n            t0 *= t0;\n            n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);\n        }\n        let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n        if (t1 < 0)\n            n1 = 0.0;\n        else {\n            const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];\n            t1 *= t1;\n            n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);\n        }\n        let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n        if (t2 < 0)\n            n2 = 0.0;\n        else {\n            const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];\n            t2 *= t2;\n            n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);\n        }\n        let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n        if (t3 < 0)\n            n3 = 0.0;\n        else {\n            const gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];\n            t3 *= t3;\n            n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);\n        }\n        let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n        if (t4 < 0)\n            n4 = 0.0;\n        else {\n            const gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];\n            t4 *= t4;\n            n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);\n        }\n        // Sum up and scale the result to cover the range [-1,1]\n        return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    };\n}\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random) {\n    const tableSize = 512;\n    const p = new Uint8Array(tableSize);\n    for (let i = 0; i < tableSize / 2; i++) {\n        p[i] = i;\n    }\n    for (let i = 0; i < tableSize / 2 - 1; i++) {\n        const r = i + ~~(random() * (256 - i));\n        const aux = p[i];\n        p[i] = p[r];\n        p[r] = aux;\n    }\n    for (let i = 256; i < tableSize; i++) {\n        p[i] = p[i - 256];\n    }\n    return p;\n}\n//# sourceMappingURL=simplex-noise.js.map","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2022 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\n\n// these #__PURE__ comments help uglifyjs with dead code removal\n// \nconst F2 = /*#__PURE__*/ 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = /*#__PURE__*/ (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = /*#__PURE__*/ (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = /*#__PURE__*/ (5.0 - Math.sqrt(5.0)) / 20.0;\n\n// I'm really not sure why this | 0 (basically a coercion to int)\n// is making this faster but I get ~5 million ops/sec more on the\n// benchmarks across the board or a ~10% speedup.\nconst fastFloor = (x: number) => Math.floor(x) | 0;\n\nconst grad2 = /*#__PURE__*/ new Float64Array([1, 1,\n  -1, 1,\n  1, -1,\n\n  -1, -1,\n  1, 0,\n  -1, 0,\n\n  1, 0,\n  -1, 0,\n  0, 1,\n\n  0, -1,\n  0, 1,\n  0, -1]);\n\n// double seems to be faster than single or int's\n// probably because most operations are in double precision\nconst grad3 = /*#__PURE__*/ new Float64Array([1, 1, 0,\n  -1, 1, 0,\n  1, -1, 0,\n\n  -1, -1, 0,\n  1, 0, 1,\n  -1, 0, 1,\n\n  1, 0, -1,\n  -1, 0, -1,\n  0, 1, 1,\n\n  0, -1, 1,\n  0, 1, -1,\n  0, -1, -1]);\n\n// double is a bit quicker here as well\nconst grad4 = /*#__PURE__*/ new Float64Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n  0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n  1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n  -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n  1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n  -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n  1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n  -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n\n/**\n * A random() function, must return a number in the interval [0,1), just like Math.random().\n */\nexport type RandomFn = () => number;\n\n/**\n * Samples the noise field in two dimensions\n * \n * Coordinates should be finite, bigger than -2^31 and smaller than 2^31.\n * @param x\n * @param y\n * @returns a number in the interval [-1, 1]\n */\nexport type NoiseFunction2D = (x: number, y: number) => number;\n\n/**\n * Creates a 2D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction2D}\n */\nexport function createNoise2D(random: RandomFn = Math.random): NoiseFunction2D {\n  const perm = buildPermutationTable(random);\n  // precalculating this yields a little ~3% performance improvement.\n  const permGrad2x = new Float64Array(perm).map(v => grad2[(v % 12) * 2]);\n  const permGrad2y = new Float64Array(perm).map(v => grad2[(v % 12) * 2 + 1]);\n  return function noise2D(x: number, y: number): number {\n    // if(!isFinite(x) || !isFinite(y)) return 0;\n    let n0 = 0; // Noise contributions from the three corners\n    let n1 = 0;\n    let n2 = 0;\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y) * F2; // Hairy factor for 2D\n    const i = fastFloor(x + s);\n    const j = fastFloor(y + s);\n    const t = (i + j) * G2;\n    const X0 = i - t; // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t;\n    const x0 = x - X0; // The x,y distances from the cell origin\n    const y0 = y - Y0;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    else {\n      i1 = 0;\n      j1 = 1;\n    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2;\n    const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 >= 0) {\n      const gi0 = ii + perm[jj];\n      const g0x = permGrad2x[gi0];\n      const g0y = permGrad2y[gi0];\n      t0 *= t0;\n      // n0 = t0 * t0 * (grad2[gi0] * x0 + grad2[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      n0 = t0 * t0 * (g0x * x0 + g0y * y0);\n    }\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 >= 0) {\n      const gi1 = ii + i1 + perm[jj + j1];\n      const g1x = permGrad2x[gi1];\n      const g1y = permGrad2y[gi1];\n      t1 *= t1;\n      // n1 = t1 * t1 * (grad2[gi1] * x1 + grad2[gi1 + 1] * y1);\n      n1 = t1 * t1 * (g1x * x1 + g1y * y1);\n    }\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 >= 0) {\n      const gi2 = ii + 1 + perm[jj + 1];\n      const g2x = permGrad2x[gi2];\n      const g2y = permGrad2y[gi2];\n      t2 *= t2;\n      // n2 = t2 * t2 * (grad2[gi2] * x2 + grad2[gi2 + 1] * y2);\n      n2 = t2 * t2 * (g2x * x2 + g2y * y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2);\n  };\n}\n\n/**\n * Samples the noise field in three dimensions\n * \n * Coordinates should be finite, bigger than -2^31 and smaller than 2^31.\n * @param x\n * @param y\n * @param z\n * @returns a number in the interval [-1, 1]\n */\nexport type NoiseFunction3D = (x: number, y: number, z: number) => number;\n\n/**\n * Creates a 3D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction3D}\n */\nexport function createNoise3D(random: RandomFn = Math.random): NoiseFunction3D {\n  const perm = buildPermutationTable(random);\n  // precalculating these seems to yield a speedup of over 15%\n  const permGrad3x = new Float64Array(perm).map(v => grad3[(v % 12) * 3]);\n  const permGrad3y = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 1]);\n  const permGrad3z = new Float64Array(perm).map(v => grad3[(v % 12) * 3 + 2]);\n  return function noise3D(x: number, y: number, z: number): number {\n    let n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n    const i = fastFloor(x + s);\n    const j = fastFloor(y + s);\n    const k = fastFloor(z + s);\n    const t = (i + j + k) * G3;\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const x0 = x - X0; // The x,y,z distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // X Y Z order\n      else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // X Z Y order\n      else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    }\n    else { // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Z Y X order\n      else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Y Z X order\n      else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3;\n    const z1 = z0 - k1 + G3;\n    const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3;\n    const z2 = z0 - k2 + 2.0 * G3;\n    const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3;\n    const z3 = z0 - 1.0 + 3.0 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = ii + perm[jj + perm[kk]];\n      t0 *= t0;\n      n0 = t0 * t0 * (permGrad3x[gi0] * x0 + permGrad3y[gi0] * y0 + permGrad3z[gi0] * z0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1]];\n      t1 *= t1;\n      n1 = t1 * t1 * (permGrad3x[gi1] * x1 + permGrad3y[gi1] * y1 + permGrad3z[gi1] * z1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2]];\n      t2 *= t2;\n      n2 = t2 * t2 * (permGrad3x[gi2] * x2 + permGrad3y[gi2] * y2 + permGrad3z[gi2] * z2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = ii + 1 + perm[jj + 1 + perm[kk + 1]];\n      t3 *= t3;\n      n3 = t3 * t3 * (permGrad3x[gi3] * x3 + permGrad3y[gi3] * y3 + permGrad3z[gi3] * z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3);\n  };\n}\n\n/**\n * Samples the noise field in four dimensions\n * \n * Coordinates should be finite, bigger than -2^31 and smaller than 2^31.\n * @param x\n * @param y\n * @param z\n * @param w\n * @returns a number in the interval [-1, 1]\n */\nexport type NoiseFunction4D = (x: number, y: number, z: number, w: number) => number;\n\n/**\n * Creates a 4D noise function\n * @param random the random function that will be used to build the permutation table\n * @returns {NoiseFunction4D}\n */\nexport function createNoise4D(random: RandomFn = Math.random): NoiseFunction4D {\n  const perm = buildPermutationTable(random);\n  // precalculating these leads to a ~10% speedup\n  const permGrad4x = new Float64Array(perm).map(v => grad4[(v % 32) * 4]);\n  const permGrad4y = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 1]);\n  const permGrad4z = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 2]);\n  const permGrad4w = new Float64Array(perm).map(v => grad4[(v % 32) * 4 + 3]);\n  return function noise4D(x: number, y: number, z: number, w: number): number {\n    let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4; // Factor for 4D skewing\n    const i = fastFloor(x + s);\n    const j = fastFloor(y + s);\n    const k = fastFloor(z + s);\n    const l = fastFloor(w + s);\n    const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const W0 = l - t;\n    const x0 = x - X0; // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    const w0 = w - W0;\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // Six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to rank the numbers.\n    let rankx = 0;\n    let ranky = 0;\n    let rankz = 0;\n    let rankw = 0;\n    if (x0 > y0) rankx++;\n    else ranky++;\n    if (x0 > z0) rankx++;\n    else rankz++;\n    if (x0 > w0) rankx++;\n    else rankw++;\n    if (y0 > z0) ranky++;\n    else rankz++;\n    if (y0 > w0) ranky++;\n    else rankw++;\n    if (z0 > w0) rankz++;\n    else rankw++;\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // Rank 3 denotes the largest coordinate.\n    // Rank 2 denotes the second largest coordinate.\n    // Rank 1 denotes the second smallest coordinate.\n\n    // The integer offsets for the second simplex corner\n    const i1 = rankx >= 3 ? 1 : 0;\n    const j1 = ranky >= 3 ? 1 : 0;\n    const k1 = rankz >= 3 ? 1 : 0;\n    const l1 = rankw >= 3 ? 1 : 0;\n    // The integer offsets for the third simplex corner\n    const i2 = rankx >= 2 ? 1 : 0;\n    const j2 = ranky >= 2 ? 1 : 0;\n    const k2 = rankz >= 2 ? 1 : 0;\n    const l2 = rankw >= 2 ? 1 : 0;\n\n    // The integer offsets for the fourth simplex corner\n    const i3 = rankx >= 1 ? 1 : 0;\n    const j3 = ranky >= 1 ? 1 : 0;\n    const k3 = rankz >= 1 ? 1 : 0;\n    const l3 = rankw >= 1 ? 1 : 0;\n    // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n    const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4;\n    const z1 = z0 - k1 + G4;\n    const w1 = w0 - l1 + G4;\n    const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4;\n    const z2 = z0 - k2 + 2.0 * G4;\n    const w2 = w0 - l2 + 2.0 * G4;\n    const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4;\n    const z3 = z0 - k3 + 3.0 * G4;\n    const w3 = w0 - l3 + 3.0 * G4;\n    const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4;\n    const z4 = z0 - 1.0 + 4.0 * G4;\n    const w4 = w0 - 1.0 + 4.0 * G4;\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    const ll = l & 255;\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = ii + perm[jj + perm[kk + perm[ll]]];\n      t0 *= t0;\n      n0 = t0 * t0 * (permGrad4x[gi0] * x0 + permGrad4y[gi0] * y0 + permGrad4z[gi0] * z0 + permGrad4w[gi0] * w0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]];\n      t1 *= t1;\n      n1 = t1 * t1 * (permGrad4x[gi1] * x1 + permGrad4y[gi1] * y1 + permGrad4z[gi1] * z1 + permGrad4w[gi1] * w1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]];\n      t2 *= t2;\n      n2 = t2 * t2 * (permGrad4x[gi2] * x2 + permGrad4y[gi2] * y2 + permGrad4z[gi2] * z2 + permGrad4w[gi2] * w2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]];\n      t3 *= t3;\n      n3 = t3 * t3 * (permGrad4x[gi3] * x3 + permGrad4y[gi3] * y3 + permGrad4z[gi3] * z3 + permGrad4w[gi3] * w3);\n    }\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) n4 = 0.0;\n    else {\n      const gi4 = ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]];\n      t4 *= t4;\n      n4 = t4 * t4 * (permGrad4x[gi4] * x4 + permGrad4y[gi4] * y4 + permGrad4z[gi4] * z4 + permGrad4w[gi4] * w4);\n    }\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  };\n}\n\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random: RandomFn): Uint8Array {\n  const tableSize = 512;\n  const p = new Uint8Array(tableSize);\n  for (let i = 0; i < tableSize / 2; i++) {\n    p[i] = i;\n  }\n  for (let i = 0; i < tableSize / 2 - 1; i++) {\n    const r = i + ~~(random() * (256 - i));\n    const aux = p[i];\n    p[i] = p[r];\n    p[r] = aux;\n  }\n  for (let i = 256; i < tableSize; i++) {\n    p[i] = p[i - 256];\n  }\n  return p;\n}","// https://cs.nyu.edu/~perlin/noise/\n\nconst _p = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n\t 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n\t 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n\t 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n\t 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n\t 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n\t 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n\t 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n\t 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n\t 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 ];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_p[ 256 + i ] = _p[ i ];\n\n}\n\nfunction fade( t ) {\n\n\treturn t * t * t * ( t * ( t * 6 - 15 ) + 10 );\n\n}\n\nfunction lerp( t, a, b ) {\n\n\treturn a + t * ( b - a );\n\n}\n\nfunction grad( hash, x, y, z ) {\n\n\tconst h = hash & 15;\n\tconst u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\treturn ( ( h & 1 ) == 0 ? u : - u ) + ( ( h & 2 ) == 0 ? v : - v );\n\n}\n\nclass ImprovedNoise {\n\n\tnoise( x, y, z ) {\n\n\t\tconst floorX = Math.floor( x ), floorY = Math.floor( y ), floorZ = Math.floor( z );\n\n\t\tconst X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\tx -= floorX;\n\t\ty -= floorY;\n\t\tz -= floorZ;\n\n\t\tconst xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\tconst u = fade( x ), v = fade( y ), w = fade( z );\n\n\t\tconst A = _p[ X ] + Y, AA = _p[ A ] + Z, AB = _p[ A + 1 ] + Z, B = _p[ X + 1 ] + Y, BA = _p[ B ] + Z, BB = _p[ B + 1 ] + Z;\n\n\t\treturn lerp( w, lerp( v, lerp( u, grad( _p[ AA ], x, y, z ),\n\t\t\tgrad( _p[ BA ], xMinus1, y, z ) ),\n\t\tlerp( u, grad( _p[ AB ], x, yMinus1, z ),\n\t\t\tgrad( _p[ BB ], xMinus1, yMinus1, z ) ) ),\n\t\tlerp( v, lerp( u, grad( _p[ AA + 1 ], x, y, zMinus1 ),\n\t\t\tgrad( _p[ BA + 1 ], xMinus1, y, zMinus1 ) ),\n\t\tlerp( u, grad( _p[ AB + 1 ], x, yMinus1, zMinus1 ),\n\t\t\tgrad( _p[ BB + 1 ], xMinus1, yMinus1, zMinus1 ) ) ) );\n\n\t}\n\n}\n\nexport { ImprovedNoise };\n","import * as noiseLib from \"./noise\";\nimport * as rnd from \"./rnd\";\n\nconst create = (len, mapfn) => {\n    return Array.from({length: len}, mapfn);\n}\n\nconst uint8 = (len, mapfn) => {\n    return Uint8Array.from({length: len}, mapfn);\n}\n\nconst float32 = (len, mapfn) => {\n    return Float32Array.from({length: len}, mapfn);\n}\nconst noise = (width, height, options = {}) => {\n    options = Object.assign({\n        type: 'improved',\n        scale: 1.0,\n    }, options);\n    const data = new Uint8Array(width * height);\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            const n = (noiseLib[options.type].get2(i, j, options.scale) + 1.0) / 2.0;\n            data[i * width + j] = Math.round(n * 255);\n        }\n    }\n    data.width = width;\n    data.height = height;\n    return data;\n}\n\nconst random = (width, height, options = {}) => {\n    const data = new Uint8Array(width * height);\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            const n = Math.round(rnd.num() * 255);\n            data[i * width + j] = n;\n        }\n    }\n    data.width = width;\n    data.height = height;\n    return data;\n}\n\nconst image = (url) => {\n    const data = new Uint8Array();\n    tx.load(url, (texture) => {\n        const image = texture.image;\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(image, 0, 0);\n        const imageData = ctx.getImageData(0, 0, image.width, image.height);\n        data.set(imageData.data.buffer);\n        data.width = image.width;\n        data.height = image.height;\n    });\n    return data;\n}\n\nconst sum = (list) => {\n    return list.reduce((partialSum, a) => partialSum + a, 0);\n};\n\nconst mul = (list, mul) => {\n    return list.map((v) => v * mul);\n};\n\nconst padTo = (arr, len, value = 0) => {\n    if (arr.length < len) {\n        const padding = new Array(len - arr.length).fill(value); // Creates an array filled with zeros.\n        return arr.concat(padding);\n    }\n    return arr;\n}\n\nconst normalize = (arr, min = 0, max = 0) => {\n    max = max || Math.max(...arr);\n    return arr.map(value => (value - min) / (max - min));\n}\n\nconst avg = (arr) => {\n    return arr.reduce((acc, value) => acc + value, 0) / arr.length;\n}\n\nwindow.arr = { create, uint8, float32, noise, random, image, sum, mul, padTo, normalize, avg };\n\nexport { create, uint8, float32, noise, random, image, sum, mul, padTo, normalize, avg };"],"names":[],"version":3,"file":"index.js.map"}